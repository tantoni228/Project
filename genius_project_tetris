import pygame
import os
import sys

class Tile(pygame.sprite.Sprite):
    def __init__(self, tile_type, pos_x, pos_y):
        super().__init__(tiles_group, all_sprites)
        self.image = tile_images[tile_type]
        self.rect = self.image.get_rect().move(
            tile_width * pos_x, tile_height * pos_y)


class Player(pygame.sprite.Sprite):
    def __init__(self, pos_x, pos_y):
        super().__init__(player_group, all_sprites)
        self.image = player_image
        self.x = pos_x
        self.y = pos_y
        self.rect = self.image.get_rect().move(
            tile_width * self.x + 15, tile_height * self.y + 5)

    def get_cordinates(self):
        return self.x, self.y

    def left(self):
        x, y = self.get_cordinates()
        try:
            if not map_list[y][x - 1]:
                self.x -= 1
                self.rect = self.image.get_rect().move(
                    tile_width * self.x + 15, tile_height * self.y + 5)
                self.x = x - 1
                all_sprites.draw(screen)
                all_sprites.update()
            else:
                return
        except IndexError:
            return

    def right(self):
        x, y = self.get_cordinates()
        try:
            if not map_list[y][x + 1]:
                self.x += 1
                self.rect = self.image.get_rect().move(
                    tile_width * self.x + 15, tile_height * self.y + 5)
                all_sprites.draw(screen)
                all_sprites.update()
            else:
                return
        except IndexError:
            return

    def up(self):
        x, y = self.get_cordinates()
        try:
            if not map_list[y - 1][x]:
                self.y -= 1
                self.rect = self.image.get_rect().move(
                    tile_width * self.x + 15, tile_height * self.y + 5)
                all_sprites.draw(screen)
                all_sprites.update()
            else:
                return
        except IndexError:
            return

    def down(self):
        x, y = self.get_cordinates()
        try:
            if not map_list[y + 1][x]:
                self.y += 1
                self.rect = self.image.get_rect().move(
                    tile_width * self.x + 15, tile_height * self.y + 5)
                all_sprites.draw(screen)
                all_sprites.update()
            else:
                return
        except IndexError:
            return


def load_level(filename):
    filename = "data/" + filename
    fullname = os.path.join('data', name)
    if not os.path.isfile(fullname):
        print(f"Файл с картой '{fullname}' не найден")
        sys.exit()
        pygame.quit()
        return
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]

    # и подсчитываем максимальную длину
    max_width = max(map(len, level_map))

    # дополняем каждую строку пустыми клетками ('.')

    return list(map(lambda x: x.ljust(max_width, '.'), level_map))


def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


all_sprites = pygame.sprite.Group()
tiles_group = pygame.sprite.Group()
player_group = pygame.sprite.Group()
map_list = []
new_player = None


def generate_level(level):
    global new_player
    new_player, x, y = None, None, None
    for y in range(len(level)):
        map_list.append([])
        for x in range(len(level[y])):
            if level[y][x] == '.':
                Tile('empty', x, y)
                map_list[y].append(0)
            elif level[y][x] == '#':
                Tile('wall', x, y)
                map_list[y].append(1)
            elif level[y][x] == '@':
                a = x
                b = y
                Tile('empty', x, y)
                map_list[y].append(0)
    else:
        new_player = Player(a, b)
    return new_player, x, y


FPS = 50
tile_images = {
    'wall': load_image('box.png'),
    'empty': load_image('grass.png')
}
player_image = load_image('mario.png')

tile_width = tile_height = 50


def terminate():
    pygame.quit()
    sys.exit()

def start_screen():
    intro_text = ["ЗАСТАВКА", "",
                  "Правила игры",
                  "Перемещения персонажа"]

    fon = pygame.transform.scale(load_image('fon.jpg'), (WIDTH, HEIGHT))
    screen.blit(fon, (0, 0))
    font = pygame.font.Font(None, 30)
    text_coord = 50
    for line in intro_text:
        string_rendered = font.render(line, 1, pygame.Color('white'))
        intro_rect = string_rendered.get_rect()
        text_coord += 10
        intro_rect.top = text_coord
        intro_rect.x = 10
        text_coord += intro_rect.height
        screen.blit(string_rendered, intro_rect)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN or \
                    event.type == pygame.MOUSEBUTTONDOWN:
                return  # начинаем игру
        pygame.display.flip()
        clock.tick(FPS)




if __name__ == '__main__':
    pygame.init()
    pygame.display.set_caption('Перемещение героя')

    size = WIDTH, HEIGHT = 500, 500
    screen = pygame.display.set_mode(size)

    running = True
    clock = pygame.time.Clock()

    start_screen()
    player, level_x, level_y = generate_level(load_level(input()))
    while running:
        for event in pygame.event.get():
            keys = pygame.key.get_pressed()
            if event.type == pygame.QUIT:
                running = False
            if keys[pygame.K_RIGHT]:
                new_player.right()
            if keys[pygame.K_LEFT]:
                new_player.left()
            if keys[pygame.K_UP]:
                new_player.up()
            if keys[pygame.K_DOWN]:
                new_player.down()
        pygame.display.flip()
    pygame.quit()
