import pygame
import random
import os
import sys
from PyQt5.QtWidgets import (QWidget, QPushButton, QLineEdit,
    QInputDialog, QApplication)
from PyQt5.QtWidgets import QApplication, QMainWindow, QGridLayout, QWidget, QTableWidget, QTableWidgetItem
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtWidgets import QMainWindow, QTableWidgetItem

def get_color():
    return random.randrange(0, 255), random.randrange(0, 255), random.randrange(0, 255)

def start_screen():
    fon = pygame.transform.scale(load_image('fon.jpg'), (500, 620))
    screen.blit(fon, (0, 0))
    font = pygame.font.Font(None, 30)
    text_coord = 30

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN or \
                    event.type == pygame.MOUSEBUTTONDOWN:
                return  # начинаем игру
        pygame.display.flip()

def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


class MainWindow(QMainWindow):
    # Override class constructor
    def __init__(self):
        # You must call the super class method
        QMainWindow.__init__(self)
 
        self.setMinimumSize(QSize(480, 80))         # Set sizes 
        self.setWindowTitle("RATING")    # Set the window title
        central_widget = QWidget(self)              # Create a central widget
        self.setCentralWidget(central_widget)       # Install the central widget
 
        grid_layout = QGridLayout(self)         # Create QGridLayout
        central_widget.setLayout(grid_layout)   # Set this layout in central widget
 
        table = QTableWidget(self)  # Create a table
        table.setColumnCount(3)     #Set three columns
        table.setHorizontalHeaderLabels(["NAME", "TIME", "SCORE"])
        if not os.path.exists('files.txt'):
            table.setRowCount(1)
            table.horizontalHeaderItem(0).setToolTip("Column 1 ")
            table.horizontalHeaderItem(1).setToolTip("Column 2 ")
            table.horizontalHeaderItem(2).setToolTip("Column 3 ")
            table.horizontalHeaderItem(0).setTextAlignment(Qt.AlignLeft)
            table.horizontalHeaderItem(1).setTextAlignment(Qt.AlignHCenter)
            table.horizontalHeaderItem(2).setTextAlignment(Qt.AlignRight)
            table.setItem(0, 0, QTableWidgetItem("User"))
            table.setItem(0, 1, QTableWidgetItem("00:00:00"))
            table.setItem(0, 2, QTableWidgetItem("0"))
            table.resizeColumnsToContents()
            grid_layout.addWidget(table, 0, 0)   # Adding the table to the grid
        else:
            with open("files.txt", encoding="utf8") as f:
                lines = f.readlines()
                table.setRowCount(len(lines))
                for i in range(len(lines)):
                    line = lines[i].split("\n")
                    line = "".join(line)
                    line = line.split(", ")
                    table.horizontalHeaderItem(0).setToolTip("Column 1 ")
                    table.horizontalHeaderItem(1).setToolTip("Column 2 ")
                    table.horizontalHeaderItem(2).setToolTip("Column 3 ")
                    table.horizontalHeaderItem(0).setTextAlignment(Qt.AlignLeft)
                    table.horizontalHeaderItem(1).setTextAlignment(Qt.AlignHCenter)
                    table.horizontalHeaderItem(2).setTextAlignment(Qt.AlignRight)
                    table.setItem(i, 0, QTableWidgetItem(line[0]))
                    table.setItem(i, 1, QTableWidgetItem(line[1]))
                    table.setItem(i, 2, QTableWidgetItem(line[2]))
                    table.resizeColumnsToContents()
                    grid_layout.addWidget(table, 0, 0)


class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()


    def initUI(self):

        self.btn = QPushButton('NAME', self)
        self.btn.move(20, 20)
        self.btn.clicked.connect(self.showDialog)

        self.btn = QPushButton('PLAY', self)
        self.btn.move(20, 50)
        self.btn.clicked.connect(self.closed)

        self.btn = QPushButton('RATING', self)
        self.btn.move(20, 80)
        self.btn.clicked.connect(self.run)

        self.le = QLineEdit(self)
        self.le.move(130, 22)

        self.setGeometry(300, 300, 290, 150)
        self.setWindowTitle('Input dialog')
        self.show()


    def showDialog(self):
        global name
        text, ok = QInputDialog.getText(self, 'Input Dialog',
            'Enter your name:')

        if ok:
            self.le.setText(str(text))
            name = text

    def closed(self):
        self.close()

    def run(self):
        self.close()
        self.w2 = MainWindow()
        self.w2.show()

class Board:
    # создание поля
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.board = []
        for i in range(height):
            self.board.append([])
            for _ in range(width):
                self.board[i].append(0)
        # значения по умолчанию

        self.score = 0
        self.left = 0
        self.top = 0
        self.cell_size = 30
        self.a = 0
        self.o = [(4, 0), (5, 0), (4, 1), (5, 1)]
        self.c_o = None
        self.z = [(3, 0), (4, 0), (4, 1), (5, 1)]
        self.c_z = (4, 1)
        self.s = [(3, 1), (4, 1), (4, 0), (5, 0)]
        self.c_s = (4, 1)
        self.t = [(3, 0), (4, 0), (5, 0), (4, 1)]
        self.c_t = (4, 0)
        self.bl = [(3, 0), (4, 0), (5, 0), (3, 1)]
        self.c_bl = (4, 0)
        self.sl = [(3, 0), (4, 0), (5, 0), (6, 0)]
        self.c_sl = (5, 0)
        self.j = [(3, 0), (4, 0), (5, 0), (5, 1)]
        self.c_j = (4, 0)
        self.shapes = [self.o, self.z, self.s, self.t, self.bl, self.sl, self.j]
        self.cs = [self.c_o, self.c_z, self.c_s, self.c_t, self.c_bl, self.c_sl, self.c_j]

    def open_file(self, name):
        if not os.path.exists('files.txt'):
            f = open('files.txt', 'w')  # создание файла
            f.write(f'{self.name}, {self.text_time}, {self.score}\n')
            print(1)
        else:
            f = open('files.txt', 'a')
            f.write(f'{self.name}, {self.text_time}, {self.score}')
        self.a = 1
        f.close()

    def set_view(self, left, top, cell_size):
        self.left = left
        self.top = top
        self.cell_size = cell_size

    def get_shape(self):
        global run
        self.shape_i = random.choice(range(6))
        self.shape = list(self.shapes[self.shape_i])
        if self.shape_i:
            self.c_shape = list(self.cs[self.shape_i])
        else:
            self.c_shape = None
        for i, elem in enumerate(self.shape):
            self.shape[i] = list(elem)
        self.color = get_color()
        for i in self.shape:
            x = int(i[0])
            y = int(i[1])
            if self.board[y][x]:
                self.text_time = out
                run = True
                if not self.a:
                    self.open_file('files.txt')
                return
        for i in self.shape:
            x = int(i[0])
            y = int(i[1])
            self.board[y][x] = self.color

    def render(self, screen):
        for y in range(self.height):
            for x in range(self.width):
                if not self.board[y][x]:
                    pygame.draw.rect(screen, pygame.Color(255, 255, 255), (
                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,
                    self.cell_size), 1)
                else:
                    pygame.draw.rect(screen, pygame.Color(self.board[y][x]), (
                    x * self.cell_size + self.left + 1, y * self.cell_size + self.top + 1, self.cell_size - 2,
                    self.cell_size - 2))
                    pygame.draw.rect(screen, pygame.Color(255, 255, 255), (
                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,
                    self.cell_size), 1)

    def on_click(self, cell):
        print(cell)

    def get_click(self, mouse_pos):
        cell = self.get_cell(mouse_pos)
        return cell

    def get_cell(self, mouse_pos):
        cell_x = (mouse_pos[0] - self.left) // self.cell_size
        cell_y = (mouse_pos[1] - self.top) // self.cell_size
        if cell_x < 0 or cell_x >= self.width or cell_y < 0 or cell_y >= self.height:
            return None
        else:
            return cell_x, cell_y

    def moving_shape_left(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.oldc_shape = self.c_shape.copy()
            self.c_shape = [self.c_shape[0] - 1, self.c_shape[1]]
        else:
            self.oldc_shape = None
            self.c_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if x + 1 < 0 or self.board[y][x - 1] != self.color and self.board[y][x - 1] != 0:
                return
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = 0
        for i in range(len(self.shape)):
            if self.shape[i][0] - 1 >= 0:
                self.shape[i] = [self.shape[i][0] - 1, self.shape[i][1]]
            else:
                self.from_error()
                return
        self.draw_shapes()

    def moving_shape_right(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.oldc_shape = self.c_shape.copy()
            self.c_shape = [self.c_shape[0] + 1, self.c_shape[1]]
        else:
            self.oldc_shape = None
            self.c_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if x + 2 > 10 or self.board[y][x + 1] != self.color and self.board[y][x + 1] != 0:
                return
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = 0
        for i in range(len(self.shape)):
            if self.shape[i][0] + 1 <= 10:
                self.shape[i] = [self.shape[i][0] + 1, self.shape[i][1]]
            else:
                self.from_error()
                return
        self.draw_shapes()

    def turning_shape(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.old_shape = self.shape.copy()
            for i in range(len(self.shape)):
                x = self.shape[i][0]
                y = self.shape[i][1]
                self.board[y][x] = 0
            for i in range(len(self.shape)):
                x, y = [-(self.shape[i][1] - self.c_shape[1]) + self.c_shape[0], self.shape[i][0] - self.c_shape[0] + self.c_shape[1]]
                if x + 1 > 10 or y + 1 > 20 or x < 0:
                    self.from_error()
                    return
                if self.board[y][x] != self.color and self.board[y][x] != 0:
                    self.from_error()
                    return
                else:
                    self.shape[i] = [x, y]
            self.draw_shapes()

    def draw_shapes(self):
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if not y < 0:
                self.board[y][x] = self.color

    def from_error(self):
        self.shape = self.old_shape
        self.c_shape = self.oldc_shape
        self.old_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = self.color
        return

    def drop_shape(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.oldc_shape = self.c_shape.copy()
            self.c_shape = [self.c_shape[0], self.c_shape[1] + 1]
        else:
            self.oldc_shape = None
            self.c_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if y + 1 == 20:
                self.delete_line()
                self.get_shape()
                return
            if self.board[y + 1][x] != self.color and self.board[y + 1][x] != 0:
                self.delete_line()
                self.get_shape()
                return
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = 0
        for i in range(len(self.shape)):
            if self.shape[i][0] + 1 <= 20:
                self.shape[i] = [self.shape[i][0], self.shape[i][1] + 1]
            else:
                self.from_error()
                return
        self.draw_shapes()

    def delete_line(self):
        self.y = []
        for i in range(len(self.shape)):
            if self.shape[i][1] not in self.y:
                self.y.append(self.shape[i][1])
        a = 0
        for y in self.y:
            cell = 0
            for x in self.board[y]:
                if x:
                    cell += 1
            else:
                if cell == 10:
                    a += 1
                    del self.board[y]
                    self.board.insert(0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if a == 1:
            self.score += 100
        elif a == 2:
            self.score += 300
        elif a == 3:
            self.score += 700
        elif a == 4:
            self.score += 1500
        self.text_score = font2.render(str(board.score), True, (255, 255, 255))




if __name__ == '__main__':
    name = 'User'
    board = Board(10, 20)
    board.set_view(10, 10, 30)
    board.name = 'User'
    app = QApplication(sys.argv)
    ex = Example()
    app.exec_()
    board.name = name
    pygame.init()
    pygame.display.set_caption('Тетрис 1.1')

    size = width, height = 500, 620
    screen = pygame.display.set_mode(size)
    MYEVENTTYPE = pygame.USEREVENT + 1


    image = pygame.transform.scale(load_image('gameover.png'), (503, 620))
    image2 = pygame.transform.scale(load_image('fon2.jpg'), (300, 600))
    pos_x = -500
    v = 100
    run = False

    running = True
    FPS = 30
    clock = pygame.time.Clock()
    board.get_shape()
    pygame.time.set_timer(MYEVENTTYPE, 100)

    ticks = pygame.time.get_ticks()
    seconds = int(ticks / 1000 % 60)
    minutes = int(seconds % 60)


    start_screen()

    font = pygame.font.SysFont('timesnewroman', 38)
    font2 = pygame.font.SysFont('arial', 38)
    text1 = font.render("PYTHON", True, (100, 255, 100))
    text2 = font.render("PYGAME", True, (100, 255, 100))
    text3 = font.render("SCORE:", True, (100, 255, 100))
    board.text_score = font2.render(str(board.score), True, (255, 255, 255))
    while running:
        for event in pygame.event.get():
            if run:
                a = 0
            elif event.type == MYEVENTTYPE:
                board.drop_shape()
            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT:
                    board.moving_shape_left()
                if event.key == pygame.K_RIGHT:
                    board.moving_shape_right()
                if event.key == pygame.K_UP:
                    board.turning_shape()
            if event.type == pygame.QUIT:
                running = False
        if pos_x >= -3:
            run = False
        if run:
            pos_x += v / FPS
            clock.tick(FPS)

        ticks = pygame.time.get_ticks()
        seconds = int(ticks / 1000 % 60)
        minutes = int(ticks / 60000 % 24)
        hours = int(ticks / 3600000 % 24)
        out = f'{hours}:{minutes}:{seconds}'
        text_time = font2.render(out, True, (255, 255, 255))

        screen.fill((0, 33, 55))
        screen.blit(image2, (10, 10))
        screen.blit(text1, (325, 10))
        screen.blit(text2, (325, 50))
        screen.blit(text3, (325, 130))
        screen.blit(board.text_score, (325, 170))
        board.render(screen)
        screen.blit(text_time, (325, 87))
        screen.blit(image, (pos_x, 0))
        pygame.display.flip()
    pygame.quit()
