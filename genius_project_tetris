import pygame
import random
import os
import sys

def get_color():
    return random.randrange(0, 255), random.randrange(0, 255), random.randrange(0, 255)

def start_screen():
    fon = pygame.transform.scale(load_image('fon.jpg'), (300, 600))
    screen.blit(fon, (0, 0))
    font = pygame.font.Font(None, 30)
    text_coord = 30

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN or \
                    event.type == pygame.MOUSEBUTTONDOWN:
                return  # начинаем игру
        pygame.display.flip()
        clock.tick(FPS)
    
def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    return image


class Board:
    # создание поля
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.board = []
        for i in range(height):
            self.board.append([])
            for _ in range(width):
                self.board[i].append(0)
        # значения по умолчанию
        self.run = False
        self.left = 0
        self.top = 0
        self.cell_size = 30
        self.o = [(4, 0), (5, 0), (4, 1), (5, 1)]
        self.c_o = None
        self.z = [(3, 0), (4, 0), (4, 1), (5, 1)]
        self.c_z = (4, 1)
        self.s = [(3, 1), (4, 1), (4, 0), (5, 0)]
        self.c_s = (4, 1)
        self.t = [(3, 0), (4, 0), (5, 0), (4, 1)]
        self.c_t = (4, 0)
        self.bl = [(3, 0), (4, 0), (5, 0), (3, 1)]
        self.c_bl = (4, 0)
        self.sl = [(3, 0), (4, 0), (5, 0), (6, 0)]
        self.c_sl = (5, 0)
        self.j = [(3, 0), (4, 0), (5, 0), (5, 1)]
        self.c_j = (4, 0)
        self.shapes = [self.o, self.z, self.s, self.t, self.bl, self.sl, self.j]
        self.cs = [self.c_o, self.c_z, self.c_s, self.c_t, self.c_bl, self.c_sl, self.c_j]

    def set_view(self, left, top, cell_size):
        self.left = left
        self.top = top
        self.cell_size = cell_size

    def get_shape(self):
        self.shape_i = random.choice(range(6))
        self.shape = list(self.shapes[self.shape_i])
        if self.shape_i:
            self.c_shape = list(self.cs[self.shape_i])
        else:
            self.c_shape = None
        for i, elem in enumerate(self.shape):
            self.shape[i] = list(elem)
        self.color = get_color()
        for i in self.shape:
            x = int(i[0])
            y = int(i[1])
            if self.board[y][x]:
                self.run = True
            self.board[y][x] = self.color

    def render(self, screen):
        for y in range(self.height):
            for x in range(self.width):
                if not self.board[y][x]:
                    pygame.draw.rect(screen, pygame.Color(255, 255, 255), (
                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,
                    self.cell_size), 1)
                else:
                    pygame.draw.rect(screen, pygame.Color(self.board[y][x]), (
                    x * self.cell_size + self.left + 1, y * self.cell_size + self.top + 1, self.cell_size - 2,
                    self.cell_size - 2))
                    pygame.draw.rect(screen, pygame.Color(255, 255, 255), (
                    x * self.cell_size + self.left, y * self.cell_size + self.top, self.cell_size,
                    self.cell_size), 1)

    def on_click(self, cell):
        print(cell)

    def get_click(self, mouse_pos):
        cell = self.get_cell(mouse_pos)
        return cell

    def get_cell(self, mouse_pos):
        cell_x = (mouse_pos[0] - self.left) // self.cell_size
        cell_y = (mouse_pos[1] - self.top) // self.cell_size
        if cell_x < 0 or cell_x >= self.width or cell_y < 0 or cell_y >= self.height:
            return None
        else:
            return cell_x, cell_y

    def moving_shape_left(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.oldc_shape = self.c_shape.copy()
            self.c_shape = [self.c_shape[0] - 1, self.c_shape[1]]
        else:
            self.oldc_shape = None
            self.c_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if x + 1 < 0 or self.board[y][x - 1] != self.color and self.board[y][x - 1] != 0:
                return
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = 0
        for i in range(len(self.shape)):
            if self.shape[i][0] - 1 >= 0:
                self.shape[i] = [self.shape[i][0] - 1, self.shape[i][1]]
            else:
                self.from_error()
                return
        self.draw_shapes()

    def moving_shape_right(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.oldc_shape = self.c_shape.copy()
            self.c_shape = [self.c_shape[0] + 1, self.c_shape[1]]
        else:
            self.oldc_shape = None
            self.c_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if x + 2 > 10 or self.board[y][x + 1] != self.color and self.board[y][x + 1] != 0:
                return
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = 0
        for i in range(len(self.shape)):
            if self.shape[i][0] + 1 <= 10:
                self.shape[i] = [self.shape[i][0] + 1, self.shape[i][1]]
            else:
                self.from_error()
                return
        self.draw_shapes()

    def turning_shape(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.old_shape = self.shape.copy()
            for i in range(len(self.shape)):
                x = self.shape[i][0]
                y = self.shape[i][1]
                self.board[y][x] = 0
            for i in range(len(self.shape)):
                x, y = [-(self.shape[i][1] - self.c_shape[1]) + self.c_shape[0], self.shape[i][0] - self.c_shape[0] + self.c_shape[1]]
                if x + 1 > 10 or y + 1 > 20 or x < 0:
                    self.from_error()
                    return
                if self.board[y][x] != self.color and self.board[y][x] != 0:
                    self.from_error()
                    return
                else:
                    self.shape[i] = [x, y]
            self.draw_shapes()

    def draw_shapes(self):
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if not y < 0:
                self.board[y][x] = self.color

    def from_error(self):
        self.shape = self.old_shape
        self.c_shape = self.oldc_shape
        self.old_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = self.color
        return

    def drop_shape(self):
        self.old_shape = self.shape.copy()
        if self.c_shape:
            self.oldc_shape = self.c_shape.copy()
            self.c_shape = [self.c_shape[0], self.c_shape[1] + 1]
        else:
            self.oldc_shape = None
            self.c_shape = None
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            if y + 1 == 20:
                self.get_shape()
                return
            if self.board[y + 1][x] != self.color and self.board[y + 1][x] != 0:
                self.get_shape()
                return
        for i in range(len(self.shape)):
            x = self.shape[i][0]
            y = self.shape[i][1]
            self.board[y][x] = 0
        for i in range(len(self.shape)):
            if self.shape[i][0] + 1 <= 20:
                self.shape[i] = [self.shape[i][0], self.shape[i][1] + 1]
            else:
                self.from_error()
                return
        self.draw_shapes()



if __name__ == '__main__':
    pygame.init()
    pygame.display.set_caption('Тетрис 1.1')
    board = Board(10, 20)
    board.set_view(0, 0, 30)

    size = width, height = 300, 600
    screen = pygame.display.set_mode(size)
    MYEVENTTYPE = pygame.USEREVENT + 1

    image = pygame.transform.scale(load_image('gameover.png'), (300, 600))

    pos = [-780, 0]
    v = 50
    running = True
    FPS = 50
    clock = pygame.time.Clock()
    board.get_shape()
    pygame.time.set_timer(MYEVENTTYPE, 100)
    start_screen()
    a = 0
    while running:
        for event in pygame.event.get():
            if board.run or a:
                if pos[0] >= -3:
                    a = 1
                    board.run = False
                if not a:
                    pos[0] += v * clock.tick() / 1000
            elif event.type == pygame.QUIT:
                running = False
            elif event.type == MYEVENTTYPE:
                board.drop_shape()
            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT:
                    board.moving_shape_left()
                if event.key == pygame.K_RIGHT:
                    board.moving_shape_right()
                if event.key == pygame.K_UP:
                    board.turning_shape()
        screen.fill((0, 0, 0))
        board.render(screen)
        if board.run or a:
            screen.blit(image, (pos))
        pygame.display.flip()
    pygame.quit()
